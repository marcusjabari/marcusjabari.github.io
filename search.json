[
  {
    "objectID": "danl_proj_nba.html#salary-distribution-among-teams",
    "href": "danl_proj_nba.html#salary-distribution-among-teams",
    "title": "Data Analysis Project",
    "section": "Salary Distribution Among Teams",
    "text": "Salary Distribution Among Teams\nLet’s start with the salary distribution among teams using seaborn for visualization. ​​\n\n\n# Handle missing values in 'Salary' by replacing them with the median salary\nmedian_salary = nba['Salary'].median()\nnba['Salary'].fillna(median_salary, inplace=True)\n\n/var/folders/_m/d6jf0jhd2zzdfd5kzdhl_24w0000gn/T/ipykernel_79892/1671011424.py:3: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  nba['Salary'].fillna(median_salary, inplace=True)\n\n\n\n# Set the aesthetic style of the plots\nsns.set_style(\"whitegrid\")\n\n# Calculate total salary by team\nteam_salary = (\n    nba\n    .groupby('Team')['Salary']\n    .sum()\n    .reset_index()\n    .sort_values(by='Salary', ascending=False)\n)\n\n# Plot total salary by team\nplt.figure(figsize=(10, 16))\nsns.barplot(data = team_salary,\n            x = 'Salary', y = 'Team',\n            palette = 'coolwarm')\nplt.title('Total Salary Distribution Among NBA Teams')\nplt.xlabel('Total Salary')\nplt.ylabel('Team')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\nThe visualization above displays the total salary distribution among NBA teams, with teams sorted by their total salary expenditure. This bar plot reveals which teams are the biggest spenders on player salaries and which are more conservative. The color gradient provides a visual cue to easily distinguish between the higher and lower spending teams.\nNotice that Portland Trail Blazers has the highest total salary followed by Golden State Warriors and Philadelphia 76ers, and Memphis Grizzlies has the lowest total salary."
  },
  {
    "objectID": "danl_proj_nba.html#player-age-distribution",
    "href": "danl_proj_nba.html#player-age-distribution",
    "title": "Data Analysis Project",
    "section": "Player Age Distribution",
    "text": "Player Age Distribution\nNext, let’s explore the Player Age Distribution across the NBA. We’ll create a histogram to visualize how player ages are distributed, which will help us understand if the league trends younger, older, or has a balanced age mix. ​​\n\n# Convert 'Birthday' column to datetime format\nfrom dateutil import parser\n# nba['Birthday'] = nba['Birthday'].apply(lambda x: parser.parse(x))\n\n# Now, let's calculate the age of each player\n# nba['Age'] = (datetime.now() - nba['Birthday']).dt.days // 365\n\n# Plot the age distribution of NBA players\nplt.figure(figsize=(10, 6))\nsns.histplot(nba['Age'],\n             bins = 15,\n             kde = True,\n             color = 'skyblue')\nplt.title('Age Distribution of NBA Players')\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.show()\n\n\n/Users/bchoe/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\nThe histogram above shows the age distribution of NBA players, with a kernel density estimate (KDE) overlay to indicate the distribution shape. The plot helps identify the common ages for NBA players and whether there are significant numbers of very young or older players.\nNotice that the majority of players fall within an age range from 24 to 34. There are few players whose age is above 40."
  },
  {
    "objectID": "danl_proj_nba.html#position-wise-salary-insights",
    "href": "danl_proj_nba.html#position-wise-salary-insights",
    "title": "Data Analysis Project",
    "section": "Position-wise Salary Insights",
    "text": "Position-wise Salary Insights\nMoving on to Position-wise Salary Insights, we’ll examine how average salaries differ across player positions. This analysis could reveal which positions are typically higher-paid, potentially reflecting their value on the basketball court. Let’s create a box plot to visualize the salary distribution for each position. ​​\n\n# Plot salary distribution by player position\nplt.figure(figsize=(10, 6))\nsns.boxplot(data = nba,\n            x = 'Position', y = 'Salary',\n            palette = 'Set2')\nplt.title('Salary Distribution by Position')\nplt.xlabel('Position')\nplt.ylabel('Salary')\nplt.show()\n\n\n\n\n\n\n\n\nThe box plot above illustrates the salary distribution by player position, showcasing the variation in salaries among different positions within the NBA. PG-SG has the highest median salary."
  },
  {
    "objectID": "danl_proj_nba.html#top-10-highest-paid-players",
    "href": "danl_proj_nba.html#top-10-highest-paid-players",
    "title": "Data Analysis Project",
    "section": "Top 10 Highest Paid Players",
    "text": "Top 10 Highest Paid Players\nLastly, we’ll identify the Top 10 Highest Paid Players in the NBA. Let’s visualize this information.\n\n# Identify the top 10 highest paid players\ntop_10_salaries = nba.sort_values(by='Salary', ascending=False).head(10)\n\n# Plot the top 10 highest paid players\nplt.figure(figsize=(12, 8))\nsns.barplot(data = top_10_salaries,\n            x = 'Salary', y = 'PlayerName',\n            palette = 'viridis')\nplt.title('Top 10 Highest Paid NBA Players')\nplt.xlabel('Salary')\nplt.ylabel('Player')\nplt.show()\n\n\n\n\n\n\n\n\nThe bar plot above reveals the top 10 highest-paid NBA players, showcasing those who stand at the pinnacle of the league in terms of salary. This visualization not only highlights the star players who command the highest salaries but also may reflect their marketability, performance, and contribution to their respective teams."
  },
  {
    "objectID": "pandas_basics.html#creating-a-series",
    "href": "pandas_basics.html#creating-a-series",
    "title": "Pandas Basics",
    "section": "Creating a Series",
    "text": "Creating a Series\n\n\n# Creating a Series from a list\ndata = [10, 20, 30, 40, 50]\nseries = pd.Series(data)\nseries\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n10\n\n\n1\n20\n\n\n2\n30\n\n\n3\n40\n\n\n4\n50\n\n\n\n\ndtype: int64"
  },
  {
    "objectID": "pandas_basics.html#creating-a-dataframe",
    "href": "pandas_basics.html#creating-a-dataframe",
    "title": "Pandas Basics",
    "section": "Creating a DataFrame",
    "text": "Creating a DataFrame\n\n\n# Creating a DataFrame from a dictionary\ndata = {\n    \"Name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    \"Age\": [25, 30, 35],\n    \"City\": [\"New York\", \"Los Angeles\", \"Chicago\"]\n}\ndf = pd.DataFrame(data)\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n0\nAlice\n25\nNew York\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#exploring-data",
    "href": "pandas_basics.html#exploring-data",
    "title": "Pandas Basics",
    "section": "Exploring Data",
    "text": "Exploring Data\n\n\n# Display the first few rows\ndf.head()\n\n# Display the shape of the DataFrame\nprint(\"Shape:\", df.shape)\n\n# Display summary statistics\ndf.describe()\n\nShape: (3, 3)\n\n\n\n  \n    \n\n\n\n\n\n\nAge\n\n\n\n\ncount\n3.0\n\n\nmean\n30.0\n\n\nstd\n5.0\n\n\nmin\n25.0\n\n\n25%\n27.5\n\n\n50%\n30.0\n\n\n75%\n32.5\n\n\nmax\n35.0"
  },
  {
    "objectID": "pandas_basics.html#selecting-data",
    "href": "pandas_basics.html#selecting-data",
    "title": "Pandas Basics",
    "section": "Selecting Data",
    "text": "Selecting Data\n\n# Selecting a single column\ndf[\"Name\"]\n\n\n\n\n\n\n\n\nName\n\n\n\n\n0\nAlice\n\n\n1\nBob\n\n\n2\nCharlie\n\n\n\n\ndtype: object\n\n\n\n# Selecting multiple columns\ndf[[\"Name\", \"City\"]]\n\n\n  \n    \n\n\n\n\n\n\nName\nCity\n\n\n\n\n0\nAlice\nNew York\n\n\n1\nBob\nLos Angeles\n\n\n2\nCharlie\nChicago\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n# Selecting rows by index\ndf.iloc[0]\n\n\n\n\n\n\n\n\n0\n\n\n\n\nName\nAlice\n\n\nAge\n25\n\n\nCity\nNew York\n\n\n\n\ndtype: object"
  },
  {
    "objectID": "pandas_basics.html#filtering-data",
    "href": "pandas_basics.html#filtering-data",
    "title": "Pandas Basics",
    "section": "Filtering Data",
    "text": "Filtering Data\n\n# Filtering rows where Age is greater than 25\nfiltered_df = df[df[\"Age\"] &gt; 25]\nfiltered_df\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\n\n\n\n\n1\nBob\n30\nLos Angeles\n\n\n2\nCharlie\n35\nChicago"
  },
  {
    "objectID": "pandas_basics.html#adding-a-new-column",
    "href": "pandas_basics.html#adding-a-new-column",
    "title": "Pandas Basics",
    "section": "Adding a New Column",
    "text": "Adding a New Column\n\n\n# Adding a new column\ndf[\"Salary\"] = [50000, 60000, 70000]\ndf\n\n\n  \n    \n\n\n\n\n\n\nName\nAge\nCity\nSalary\n\n\n\n\n0\nAlice\n25\nNew York\n50000\n\n\n1\nBob\n30\nLos Angeles\n60000\n\n\n2\nCharlie\n35\nChicago\n70000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n    ## Conclusion\n\n    This notebook covers the basic operations of pandas. You can explore more advanced features like merging,\n    joining, and working with time series data in pandas documentation: https://pandas.pydata.org/docs/"
  },
  {
    "objectID": "seaborn_basics.html",
    "href": "seaborn_basics.html",
    "title": "Seaborn Example",
    "section": "",
    "text": "import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Sample data\ndata = {\n    'Category': ['A', 'B', 'C', 'D'],\n    'Values': [23, 45, 56, 78]\n}\ndf = pd.DataFrame(data)\n\n# Create a barplot\nsns.set(style=\"whitegrid\")  # Optional: Set a clean grid style\nplt.figure(figsize=(8, 6))  # Set the figure size\nsns.barplot(data=df, x='Category', y='Values', palette='viridis')\n\n# Customize the plot\nplt.title(\"Bar Plot Example\", fontsize=16)\nplt.xlabel(\"Category\", fontsize=12)\nplt.ylabel(\"Values\", fontsize=12)\n\n# Show the plot\nplt.show()\n\nFutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(data=df, x='Category', y='Values', palette='viridis')"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/python/danl_210_python_basic.html",
    "href": "posts/python/danl_210_python_basic.html",
    "title": "The Basics of Python!",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')\n\nHello, World!\n\n\n\n\n\nIn Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5\n\n\n\n\n\nPython supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\nFive is greater than two!\n\n\n\n\n\nA function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()\n\nHello from a function\n\n\n\n\n\nA list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "posts/python/danl_210_python_basic.html#what-is-python",
    "href": "posts/python/danl_210_python_basic.html#what-is-python",
    "title": "The Basics of Python!",
    "section": "",
    "text": "Python is a high-level, interpreted programming language. This is a simple Python code:\n\nprint('Hello, World!')\n\nHello, World!"
  },
  {
    "objectID": "posts/python/danl_210_python_basic.html#variables-and-data-types",
    "href": "posts/python/danl_210_python_basic.html#variables-and-data-types",
    "title": "The Basics of Python!",
    "section": "",
    "text": "In Python, variables can store data of different types without explicitly declaring the type.\nFor example:\n\ninteger_variable = 10\nstring_variable = 'Hello'\nfloat_variable = 10.5\n\nfloat_variable\n\n10.5"
  },
  {
    "objectID": "posts/python/danl_210_python_basic.html#control-structures",
    "href": "posts/python/danl_210_python_basic.html#control-structures",
    "title": "The Basics of Python!",
    "section": "",
    "text": "Python supports the usual logical conditions from mathematics:\n\n# Equals: a == b\n# Not Equals: a != b\n# Less than: a &lt; b\n# Less than or equal to: a &lt;= b\n# Greater than: a &gt; b\n# Greater than or equal to: a &gt;= b\n\nThese conditions can be used in several ways, most commonly in ‘if statements’ and loops.\n\n# if statement:\nif 5 &gt; 2:\n    print('Five is greater than two!')\n\nFive is greater than two!"
  },
  {
    "objectID": "posts/python/danl_210_python_basic.html#functions",
    "href": "posts/python/danl_210_python_basic.html#functions",
    "title": "The Basics of Python!",
    "section": "",
    "text": "A function is a block of code which only runs when it is called.\nYou can pass data, known as parameters, into a function.\nA function can return data as a result.\n\n# Defining a function:\ndef my_function():\n    print('Hello from a function')\n\n# Calling a function:\nmy_function()\n\nHello from a function"
  },
  {
    "objectID": "posts/python/danl_210_python_basic.html#lists-and-dictionaries",
    "href": "posts/python/danl_210_python_basic.html#lists-and-dictionaries",
    "title": "The Basics of Python!",
    "section": "",
    "text": "A list is a collection which is ordered and changeable.\nA dictionary is a collection which is unordered, changeable and indexed.\n\n# List example:\nmy_list = ['apple', 'banana', 'cherry']\n\n# Dictionary example:\nmy_dict = {'name': 'John', 'age': 36}"
  },
  {
    "objectID": "ESG_Project.html",
    "href": "ESG_Project.html",
    "title": "ESG Project",
    "section": "",
    "text": "Environmental, Social, and Governance (ESG) factors are critical to assessing the long-term sustainability and ethical impact of companies. Investors and regulators increasingly rely on ESG metrics to make informed decisions, reduce risk exposure, and ensure accountability. This project explores ESG-related data—specifically Controversy Level—as a proxy for stature and compliance risks across companies and sectors.\nAside from scraping current ESG Ratings using Selenium, the main focus was geared toward analyzing Controversy Levels, alongside company characteristics such as Sector, Market Capitalization, and IPO Year. This approach still offers meaningful insights into corporate behavior and sustainability risk patterns.\n\n\nThe ESG risk and controversy scores for 2025 were scraped from Yahoo Finance using Python and Selenium. Below is the full script that was used:"
  },
  {
    "objectID": "ESG_Project.html#scraping-esg-scores-with-selenium-python",
    "href": "ESG_Project.html#scraping-esg-scores-with-selenium-python",
    "title": "ESG Project",
    "section": "",
    "text": "The ESG risk and controversy scores for 2025 were scraped from Yahoo Finance using Python and Selenium. Below is the full script that was used:"
  },
  {
    "objectID": "ESG_Project.html#historical-stock-price-collection-20242025",
    "href": "ESG_Project.html#historical-stock-price-collection-20242025",
    "title": "ESG Project",
    "section": "Historical Stock Price Collection (2024–2025)",
    "text": "Historical Stock Price Collection (2024–2025)\nTo evaluate potential links between ESG performance and market behavior, I retrieved daily stock prices from January 1, 2024 to March 31, 2025 for all companies that appeared in both the 2024 and 2025 ESG datasets. I used the Python library yfinance, which is a wrapper for Yahoo Finance’s historical market data. This approach allows a consistent and reproducible pull of open, close, volume, and adjusted prices for every ticker in the analysis.\nThe data was saved to individual .csv files for future use in time series visualization and trend analysis alongside ESG metrics.\n\n# Install the yfinance package\n!pip install yfinance\n\n# Load ESG project data\nimport pandas as pd\nurl_2024 = \"https://bcdanl.github.io/data/esg_proj_2024_data.csv\"\nesg_proj_2024_data = pd.read_csv(url_2024)\n\nurl_2025 = \"https://bcdanl.github.io/data/esg_proj_2025.csv\"\nesg_proj_2025 = pd.read_csv(url_2025)\n\n# Import yfinance for pulling stock data\nimport yfinance as yf\n\n# Get tickers that exist in both ESG datasets\ntickers = set(esg_proj_2024_data['Symbol']).intersection(set(esg_proj_2025['Symbol']))\n\n# Download historical prices from Yahoo Finance\nall_prices = {}\n\nfor Symbol in tickers:\n    print(f\"Downloading: {Symbol}\")\n    df = yf.download(Symbol, start=\"2024-01-01\", end=\"2025-03-31\")\n    all_prices[Symbol] = df\n\n    # Save each stock’s data as a separate CSV\n    df.to_csv(f\"{Symbol}_stock_data.csv\")\n\n# Example output: first few rows of MSFT data\nall_prices['MSFT'].head()"
  },
  {
    "objectID": "ESG_Project.html#esg-data-analysis-and-sector-risk-assessment",
    "href": "ESG_Project.html#esg-data-analysis-and-sector-risk-assessment",
    "title": "ESG Project",
    "section": "ESG Data Analysis and Sector Risk Assessment",
    "text": "ESG Data Analysis and Sector Risk Assessment\nIn this section, I combined ESG score data from 2024 and my scraped 2025 ESG results to analyze trends in ESG performance and controversy exposure. I first loaded the 2024 and 2025 datasets, uploaded my custom-scraped ESG scores from Yahoo Finance using Selenium, and visualized patterns by sector and company age. These visualizations provide insight into how ESG risks relate to firm attributes such as industry, size, and IPO decade.\nimport pandas as pd\n\n# Load ESG project data\nurl_2024 = \"https://bcdanl.github.io/data/esg_proj_2024_data.csv\"\nesg_proj_2024_data = pd.read_csv(url_2024)\n\nurl_2025 = \"https://bcdanl.github.io/data/esg_proj_2025.csv\"\nesg_proj_2025 = pd.read_csv(url_2025)\n\n# View available columns in 2025 data\nesg_proj_2025.columns\n\n# Upload my scraped 2025 ESG results from Selenium\nfrom google.colab import files\nuploaded = files.upload()\nNext, I visualized the average ESG scores by sector using the 2024 data. This helps identify which industries are leading or lagging in ESG performance.\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsector_avg = esg_proj_2024_data.groupby('Sector')['Total_ESG'].mean().reset_index().sort_values('Total_ESG')\n\nplt.figure(figsize=(10, 5))\nsns.barplot(data=sector_avg, x='Sector', y='Total_ESG', palette='Purples_r')\nplt.title(\"Average ESG Score by Sector (2024)\")\nplt.xticks(rotation=45)\nplt.ylabel(\"Avg. ESG Score\")\nplt.show()\nThen, I loaded the scraped ESG data and used it to explore how market capitalization varies by company age, based on IPO decade.\n# Load 2025 scraped ESG scores\nesg_scores_2025_DATA = pd.read_csv('esg_results_2025.csv')\nesg_scores_2025_DATA.columns\nesg_scores_2025_DATA\nI created a new column for IPO decade and plotted market cap to identify patterns across time.\n# Create IPO Decade column and plot Market Cap by decade\nesg_proj_2025['IPO_Decade'] = (esg_scores_2025_DATA['IPO_Year'] // 10) * 10\n\nsns.boxplot(data=esg_proj_2025, x='IPO_Decade', y='Market_Cap')\nplt.title(\"Market Cap by IPO Decade\")\nplt.xticks(rotation=45)\nplt.show()\nSo far, Controversy Level proved to be a valuable ESG proxy. The analysis highlights clear differences in ESG reputational risk across sectors, firm sizes, and company age, offering insight into how businesses are positioned in an increasingly sustainability-focused investment landscape.\n\nInvestors can use Controversy Level as a red flag for screening high-risk companies.\nPolicymakers may need to focus ESG regulations more heavily on sectors like Energy.\nSmaller firms may benefit from ESG training or partnerships to reduce controversy exposure."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code with no space in the folder name.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/spotify/Spotify.html",
    "href": "posts/spotify/Spotify.html",
    "title": "Spotify Data",
    "section": "",
    "text": "import pandas as pd\nspotify = pd.read_csv('https://bcdanl.github.io/data/spotify_all.csv')\nspotify\n\n\n  \n    \n\n\n\n\n\n\npid\nplaylist_name\npos\nartist_name\ntrack_name\nduration_ms\nalbum_name\n\n\n\n\n0\n0\nThrowbacks\n0\nMissy Elliott\nLose Control (feat. Ciara & Fat Man Scoop)\n226863\nThe Cookbook\n\n\n1\n0\nThrowbacks\n1\nBritney Spears\nToxic\n198800\nIn The Zone\n\n\n2\n0\nThrowbacks\n2\nBeyoncé\nCrazy In Love\n235933\nDangerously In Love (Alben für die Ewigkeit)\n\n\n3\n0\nThrowbacks\n3\nJustin Timberlake\nRock Your Body\n267266\nJustified\n\n\n4\n0\nThrowbacks\n4\nShaggy\nIt Wasn't Me\n227600\nHot Shot\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n198000\n999998\n✝️\n6\nChris Tomlin\nWaterfall\n209573\nLove Ran Red\n\n\n198001\n999998\n✝️\n7\nChris Tomlin\nThe Roar\n220106\nLove Ran Red\n\n\n198002\n999998\n✝️\n8\nCrowder\nLift Your Head Weary Sinner (Chains)\n224666\nNeon Steeple\n\n\n198003\n999998\n✝️\n9\nChris Tomlin\nWe Fall Down\n280960\nHow Great Is Our God: The Essential Collection\n\n\n198004\n999998\n✝️\n10\nCaleb and Kelsey\n10,000 Reasons / What a Beautiful Name\n178189\n10,000 Reasons / What a Beautiful Name\n\n\n\n\n198005 rows × 7 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\nbey = spotify['artist_name'] == 'Beyoncé'\nbeyonce_songs= spotify.track_name[bey] #Beyoncé songs only!\n\n\n\n\n\n\n\n\n\ntrack_name\n\n\n\n\n2\nCrazy In Love\n\n\n18\nCheck On It - feat. Bun B and Slim Thug\n\n\n342\nSingle Ladies (Put a Ring on It)\n\n\n1059\nHalo\n\n\n1079\nDrunk in Love\n\n\n...\n...\n\n\n197084\n7/11\n\n\n197107\nDance for You\n\n\n197127\nRocket\n\n\n197521\nSingle Ladies (Put a Ring on It)\n\n\n197720\nIrreplaceable (Irreemplazable) - Spanish version\n\n\n\n\n591 rows × 1 columns\ndtype: object\n\n\n\n'Dangerously In Love (Alben für die Ewigkeit)'\nbey_album = spotify.album_name == 'Dangerously In Love (Alben für die Ewigkeit)'\n\n\n(\n  spotify[bey_album][['track_name']]\n  .value_counts()\n)\n#Crazy in Love is my favorite song from this album, it was also the most popular track\n\n\n\n\n\n\n\n\ncount\n\n\ntrack_name\n\n\n\n\n\nCrazy In Love\n59\n\n\nNaughty Girl\n6\n\n\nDangerously In Love\n4\n\n\nMe, Myself and I\n3\n\n\nThe Closer I Get to You\n3\n\n\nSpeechless\n1\n\n\n\n\ndtype: int64"
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Starwars",
    "section": "",
    "text": "Let’s analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Starwars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Starwars",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Marcus Lewis",
    "section": "",
    "text": "Hello, I’m Marcus! I major in Data Analytics at SUNY Geneseo. Outside of Data Analytics, I am a Sprinter on the Men’s Track and Field team. Additionally, during the semester I work a part-time job at Geneseo’s local 7-Eleven!"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Marcus Lewis",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.S. in Data Analytics | Aug 2022 - May 2026"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Marcus Lewis",
    "section": "Experience",
    "text": "Experience\nLaboratory for Laser Energetics - University of Rochester | Project Assistant| May 2024 - Aug 2024"
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Insightful Analytics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nThe Basics of Python!\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nMarcus Lewis\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nSpotify Data\n\n\n\n\n\n\n\n\nFeb 14, 2025\n\n\nMarcus Lewis\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nStarwars\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYour Name\n\n\n3 min\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "ESG_Project.html#conclusion",
    "href": "ESG_Project.html#conclusion",
    "title": "ESG Project",
    "section": "Conclusion",
    "text": "Conclusion\nThis ESG project explored company-level sustainability risk through the lens of Controversy Levels and ESG scores across 2024 and 2025. While full ESG metrics were not always available, the controversy data and market indicators (sector, IPO year, market cap) provided meaningful insight into reputational and structural ESG risk.\nKey findings include: - Sectors like Energy and Consumer Discretionary had higher ESG risk exposure. - Larger and older firms tended to have higher market capitalization but weren’t always controversy-free. - Newer firms (IPO after 2010) showed less controversy, potentially indicating more modern governance standards.\nThese findings could be useful for: - Investors, who may want to screen for ESG risk beyond traditional financial indicators. - Policymakers, aiming to target specific sectors for regulatory reform. - Companies, especially small-cap and newly public ones, to build ESG maturity early."
  },
  {
    "objectID": "ESG_Project.html#limitations-and-future-work",
    "href": "ESG_Project.html#limitations-and-future-work",
    "title": "ESG Project",
    "section": "Limitations and Future Work",
    "text": "Limitations and Future Work\n\nThis project focused on ESG controversy as a proxy due to limited score availability for 2025.\nFuture work could incorporate updated ESG risk scores across more years, and apply time-series analysis to stock performance vs ESG trend."
  },
  {
    "objectID": "ESG_Project.html#tools-and-workflow",
    "href": "ESG_Project.html#tools-and-workflow",
    "title": "ESG Project",
    "section": "Tools and Workflow",
    "text": "Tools and Workflow\n\nPython (Selenium, yfinance, pandas) for scraping and data collection\nR (tidyverse, ggplot2) for visualization and analysis\nQuarto and GitHub for reporting and publishing\n\nThis project demonstrates an end-to-end pipeline of data scraping → transformation → visualization → publishing, all in a reproducible format."
  },
  {
    "objectID": "ESG_Project.html#ai-and-collaboration-statement",
    "href": "ESG_Project.html#ai-and-collaboration-statement",
    "title": "ESG Project",
    "section": "AI and Collaboration Statement",
    "text": "AI and Collaboration Statement\nParts of this analysis, including code organization, debugging, and documentation structure, were guided by OpenAI’s ChatGPT. All code, interpretations, and visualizations were reviewed and finalized by the author."
  },
  {
    "objectID": "ESG_Project.html#references",
    "href": "ESG_Project.html#references",
    "title": "ESG Project",
    "section": "References",
    "text": "References\n\nYahoo Finance: https://finance.yahoo.com\nESG Data: https://bcdanl.github.io/data/\nyfinance GitHub: https://github.com/ranaroussi/yfinance\nQuarto Documentation: https://quarto.org"
  }
]